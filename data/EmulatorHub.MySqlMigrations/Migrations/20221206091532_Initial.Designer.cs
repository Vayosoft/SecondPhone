// <auto-generated />
using System;
using EmulatorHub.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmulatorHub.MySqlMigrations.Migrations
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20221206091532_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EmulatorHub.Domain.Entities.Emulator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_devices_client_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_devices_provider_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("EmulatorHub.Domain.Entities.MobileClient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<string>("PushToken")
                        .HasColumnType("longtext")
                        .HasColumnName("push_token");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("SoftDeleted")
                        .HasDatabaseName("ix_clients_soft_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clients_user_id");

                    b.HasIndex("Id", "ProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_id_provider_id")
                        .HasFilter("NOT SoftDeleted");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("Vayosoft.Identity.Security.SecurityObjectEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("objid");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("obj_desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("obj_name");

                    b.HasKey("Id")
                        .HasName("pk_sec_objs");

                    b.ToTable("sec_objs", (string)null);
                });

            modelBuilder.Entity("Vayosoft.Identity.Security.SecurityRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("roleid");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("role_desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("providerid");

                    b.HasKey("Id")
                        .HasName("pk_sec_roles");

                    b.ToTable("sec_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f6694d71d26e40f5a2abb357177c9bdt",
                            Name = "Support"
                        },
                        new
                        {
                            Id = "f6694d71d26e40f5a2abb357177c9bdx",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = "f6694d71d26e40f5a2abb357177c9bdz",
                            Name = "Supervisor"
                        });
                });

            modelBuilder.Entity("Vayosoft.Identity.Security.SecurityRolePermissionsEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permid");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("objid");

                    b.Property<byte>("Permissions")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("perms");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_sec_role_permissions");

                    b.ToTable("sec_role_permissions", (string)null);
                });

            modelBuilder.Entity("Vayosoft.Identity.Security.UserRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("urid");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("roleid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sec_user_roles");

                    b.ToTable("sec_user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0e5085516ee34d4bab806757e41f6dd6",
                            RoleId = "f6694d71d26e40f5a2abb357177c9bdz",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Vayosoft.Identity.Tokens.RefreshToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("longtext")
                        .HasColumnName("reason_revoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("longtext")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("revoked");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("longtext")
                        .HasColumnName("revoked_by_ip");

                    b.HasKey("UserId", "Token")
                        .HasName("pk_refresh_tokens");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Vayosoft.Identity.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("CultureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("he-IL")
                        .HasColumnName("culture_id");

                    b.Property<DateTime?>("Deregistered")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("enddate");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<byte?>("LogLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)3)
                        .HasColumnName("log_level");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("pwdhash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("providerid");

                    b.Property<DateTime?>("Registered")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("regdate");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username", "ProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username_providerid");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CultureId = "ru-RU",
                            Email = "su@vayosoft.com",
                            PasswordHash = "VBbXzW7xlaD3YiqcVrVehA==",
                            Phone = "0500000000",
                            ProviderId = 1000L,
                            Registered = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = (byte)4,
                            Username = "su"
                        });
                });

            modelBuilder.Entity("EmulatorHub.Domain.Entities.Emulator", b =>
                {
                    b.HasOne("EmulatorHub.Domain.Entities.MobileClient", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_devices_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EmulatorHub.Domain.Entities.MobileClient", b =>
                {
                    b.HasOne("Vayosoft.Identity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_clients_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vayosoft.Identity.Tokens.RefreshToken", b =>
                {
                    b.HasOne("Vayosoft.Identity.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_entity_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vayosoft.Identity.UserEntity", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
